name: "Pet Clinic GHA cli"

on: 
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
   
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
        
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_URL: ${{ secrets.JF_URL }}
          JF_USER: ${{ secrets.JF_USER }}
          JF_PASSWORD: ${{ secrets.JF_PASS }}
          SERVER_ID: setup-jfrog-cli-server
          
      - name: Configure Repos  
        #run: jf mvnc --server-id-resolve=setup-jfrog-cli-server --server-id-deploy=setup-jfrog-cli-server --repo-resolve-releases=ohadz-ob-maven-libs-release --repo-deploy-releases=ohadz-ob-maven-libs-release --repo-resolve-snapshots=ohadz-ob-maven-libs-snapshot --repo-deploy-snapshots=ohadz-ob-maven-libs-snapshot
        
        run: |
          echo this is my docker registery server name ${{ vars.DOCKER_REG_SRV }}
          jf mvnc --server-id-resolve=setup-jfrog-cli-server --server-id-deploy=setup-jfrog-cli-server --repo-resolve-releases=${{ vars.MVN_VIRTUAL_RELEASE_REPO }} --repo-deploy-releases=${{ vars.MVN_VIRTUAL_RELEASE_REPO }} --repo-resolve-snapshots=${{ vars.MVN_VIRTUAL_SNAPSHOTS_REPO }} --repo-deploy-snapshots=${{ vars.MVN_VIRTUAL_SNAPSHOTS_REPO }}     
      - name: Test JFrog CLI
        run: |
          jf c show
          jf rt ping
          jf -v
      
    #  - name: Test Maven Project
    #    run: |
    #      jf c use setup-jfrog-cli-server
    #      jf mvn clean test -T 4
      
      - name: Install Maven Project
        run: jf mvn install -DskipTests -T 4
      
      - name: Login to Docker Enviroment
        run: docker login  -u ${{ secrets.JF_USER }} -p ${{ secrets.JF_PASS }} ${{ vars.DOCKER_REG_SRV }}
        #run: docker login ohadz.jfrog.io -u ${{ secrets.JF_USER }} -p ${{ secrets.JF_PASS }} 
        
      - name: Build and Tag Docker Image
        env: 
          DOCKER_IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME }}
          DOCKER_IMAGE_TAG: $(echo $DOCKER_REG_SRV/$DOCKER_REG_NAME/$DOCKER_IMAGE_NAME)
          DOCKER_REG_NAME: ${{ vars.DOCKER_REG_NAME }}
          DOCKER_REG_SRV: ${{ vars.DOCKER_REG_SRV }}
        run: |
          echo " this is the tag ${{ vars.DOCKER_IMAGE_TAG }} "
          echo " this is also the tag $(echo $DOCKER_REG_SRV/$DOCKER_REG_NAME/$DOCKER_IMAGE_NAME) "
          docker build -t ohad-petclinic-gha:latest .
          docker tag ohad-petclinic-gha:latest ohadz.jfrog.io/docker/ohad-petclinic-gha:latest
       # docker build -t $DOCKER_IMAGE_NAME .
       # docker tag $DOCKER_IMAGE_NAME $JOB_DOCKER_IMAGE_TAG
      - name: Push Docker Image to RT
       # run: docker push $DOCKER_IMAGE_TAG
        run: docker push ohadz.jfrog.io/docker/ohad-petclinic-gha:latest
      
      - name: Collect and Publish Build Info
        run: |
          # Collect environment variables for the build
          jf rt bce
          # Collect VCS details from git and add them to the build
          jf rt bag
          # Publish build info
          jf rt bp
          
      - name: Scan Build
        run: jf bs
          
    
