pipeline {
    agent any
    tools {
        jfrog 'jfrogcli'
    }

    environment{
        RT_URL = "ohadz.jfrog.io"
        BUILD_NAME = "petclinic-cli"
        DOCKER_IMAGE_NAME = "petclinic-cli"
        GIT_REPO = "https://github.com/odzmrfrog/spring-petclinic"
        BRANCH = "main"
        REPO_RESOLVE_RELEASES = "ohadz-ob-maven-libs-release"
        REPO_RESOLVE_SNAPSHOTS = "ohadz-ob-maven-libs-snapshot"
        REPO_DEPLOY_RELEASES = "ohadz-ob-maven-libs-release-local"
        REPO_DEPLOY_SNAPSHOTS = "ohadz-ob-maven-libs-snapshot-local"
    }

    stages {
        stage('Clone') {
            steps {
                git branch: "$BRANCH", url: "$GIT_REPO"
            }
        }

        stage('Artifactory configuration') {
            steps {
                dir('.')
                // Configure Maven project's repositories
                jf 'mvn-config --repo-resolve-releases $REPO_RESOLVE_RELEASES --repo-resolve-snapshots $REPO_RESOLVE_SNAPSHOTS --repo-deploy-releases $REPO_DEPLOY_RELEASES --repo-deploy-snapshots $REPO_DEPLOY_SNAPSHOTS'
            }
        }
      //  stage('Exec Maven commands') {
      //              steps {
      //                  dir('maven-examples/maven-example') {
      //                      // Configure Maven project's repositories
      //                      jf 'mvn-config --repo-resolve-releases libs-release --repo-resolve-snapshots libs-snapshots --repo-deploy-releases libs-release-local --repo-deploy-snapshots libs-snapshot-local'
//
      //                      // Install and publish project
      //                      jf 'mvn clean install'
      //                  }
      //              }
      //          }

        stage('Test') { 
            // test if this stage can be seperated from the rt config stage
            steps {
                jf 'mvn clean test'
            }
        }

        stage('Install'){
            steps {
                jf 'mvn install'
            }
        }

        stage('Build Scan') {
            steps {
                jf 'rt bs'
            }
        }

        stage('Build Docker image') {
            steps {
                script {
                    docker.build("$DOCKER_IMAGE_NAME", 'docker-oci-examples/docker-example')
                }
            }
        }

        stage('Scan and push image') {
            steps {
                dir('docker-oci-examples/docker-example/') {
                    // Scan Docker image for vulnerabilities
                    jf 'docker scan $DOCKER_IMAGE_NAME'

                    // Push image to Artifactory
                    jf 'docker push $DOCKER_IMAGE_NAME'
                }
            }
        }

        stage('Publish build info') {
            steps {
                jf 'rt build-publish'
            }
        }

    }
}